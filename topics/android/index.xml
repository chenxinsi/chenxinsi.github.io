<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on Xinsi&#39;s Blog</title>
    <link>https://chenxinsi.github.io/topics/android/</link>
    <description>Recent content in Android on Xinsi&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017. All rights reserved.</copyright>
    <lastBuildDate>Tue, 26 Dec 2017 14:40:44 +0800</lastBuildDate>
    
	<atom:link href="https://chenxinsi.github.io/topics/android/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Android_bp</title>
      <link>https://chenxinsi.github.io/post/android_bp/</link>
      <pubDate>Tue, 26 Dec 2017 14:40:44 +0800</pubDate>
      
      <guid>https://chenxinsi.github.io/post/android_bp/</guid>
      <description>Android.bp 理解Android Build系统  前言 Android Build系统是Android源码的一部分,用来编译Android系统，Android SDK以及相关文档。众所周知，Android是一个开源的操作系统，包含着大量的开源项目以及许多模块。不同的生产厂商不同的设备对于Android系统的定制都是不一样的。 如何将这些项目和模块的编译统一管理起来，如何能够在不同的操作系统上进行编译，如何在编译时能够支持面向不同的硬件设备，不同的编译类型，还要提供面向各个厂商的定制扩展，是非常有难度的。 但是Android Build系统很好的解决了这些问题。 概述 整个Build系统的Make文件可以分为三类：  Build系统核心文件 定义了整个Build系统框架，而其他所有的Make文件都是在这个框架的基础上编写出来的。 Android不同版本的build目录：    |Android6.0|Android7.0|Android8.0| |:&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;:|:&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;:|:&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-:| |android1|android2|android3| ||||
 针对某个产品的Make文件
 针对某个模块的Make文件
  背景 从Android 7.0 (N)开始, Google开始逐步使用Android.bp代替原来的Android.mk进行编译. Google称之为soong, 具体可以参考: soong
 Makefile AOSP的==android-6.0.1_r9==分支,是最后一个纯Makefile的大版本。随着时间的发展，Android项目越来越庞大，纯Makefile编译系统已经越来越不堪。不仅扩展不便，而且执行效率也不太高。从7.0版本开始，Android已经用Ninja来替代Makefile。
   What ? 目前还存在的问题  1.对C/C++代码，如果需要使用宏开关时, 由于android整个编译系统还没完全切换过来, 导致 在项目mk文件定义的开关, 还不能生效. 解决： a.通过export命令, 把相应的开关设置到环境变量, go文件就能读取到了. b.把开关集中放到某一个文件中, 然后在go文件中直接读取这个文件. 2.对于条件编译, 需要添加go文件进行控制. 解决： 下面是一个libsysutils模块Android.bp的内容: libsysutils_defaults以上及相关内容是新添加关键部分, 用来支持go文件进行条件编译. 如果想让TLV_FEATURE_ENABLED起作用, 需要export TLV_FEATURE_ENABLED=yes.  示例如下： Android.</description>
    </item>
    
    <item>
      <title>Soong</title>
      <link>https://chenxinsi.github.io/post/soong/</link>
      <pubDate>Mon, 25 Dec 2017 20:53:24 +0800</pubDate>
      
      <guid>https://chenxinsi.github.io/post/soong/</guid>
      <description>Soong Soong是基于Android构建系统的替代品。它用Android.bp文件替换Android.mk文件，这些文件是类似JSON的简单声明性描述。
Android.bp文件格式 按照设计，Android.bp文件非常简单。没有条件或控制流程语句 - 在Go中编写的构建逻辑中处理任何复杂性。在可能的情况下，Android.bp文件的语法和语义有意与Bazel BUILD文件类似。 Bazel BUILD files连接
模块 Android.bp文件中的模块以模块类型开头，后面是一组name: value,格式的属性：
cc_binary { name: &amp;quot;gzip&amp;quot;, srcs: [&amp;quot;src/test/minigzip.c&amp;quot;], shared_libs: [&amp;quot;libz&amp;quot;], stl: &amp;quot;none&amp;quot;, }  每个模块都必须有一个name属性，并且该值在所有的Android.bp文件中必须是唯一的。
有关有效模块类型及其属性的列表，请参阅 $OUT_DIR/soong/.bootstrap/docs/soong_build.html.
变量 一个Android.bp文件可能包含顶级变量赋值：
gzip_srcs = [&amp;quot;src/test/minigzip.c&amp;quot;], cc_binary { name: &amp;quot;gzip&amp;quot;, srcs: gzip_srcs, shared_libs: [&amp;quot;libz&amp;quot;], stl: &amp;quot;none&amp;quot;, }  变量被限定在声明文件的其余部分，以及任何子蓝图文件中。变量是不可变的，只有一个例外 - 它们可以附加到+ =赋值，但是只有在它们被引用之前。
注释 Android.bp文件可以包含C风格的多行/* */和C ++风格的单行//注释。
类型 变量和属性是强类型的，变量是基于第一个赋值而动态变化的，而属性由模块类型静态地赋值。支持的类型是: * Bool (true or false) * Integers (int) * Strings (&amp;quot;string&amp;quot;) * Lists of strings ([&amp;quot;string1&amp;quot;, &amp;quot;string2&amp;quot;]) * Maps ({key1: &amp;quot;value1&amp;quot;, key2: [&amp;quot;value2&amp;quot;]})</description>
    </item>
    
  </channel>
</rss>